#include <iostream>
	using namespace std;

/*
	Goal: Find the greatest product of five consecutive digits in the 1000-digit number.
	Finished!
	Answer: 40824
*/

int main()
{
	// Our 1000 digit number. Declare as a string since no other data type can hold it.
	string numbers = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";
	
	int start = 0; // Iterator for first digit of consecutive 5 digits.
	
	/*	Below are our declarations of 5 char* , one for each digit, named accordingly. We must also
	be sure to initiate it as a new char.
		We also declare our digit integers that will hold the integer version of each digit. 
	*/
	char* firstDigit = new char [1];
	int firstDigitInt;
	char* secondDigit = new char [1];
	int secondDigitInt;
	char* thirdDigit = new char [1];
	int thirdDigitInt;
	char* fourthDigit = new char [1];
	int fourthDigitInt;
	char* fifthDigit = new char [1];
	int fifthDigitInt;
	int highestProd = 0; // The current highest product of 5 consecutive primes.
	while ( start+5 < 1001 ) // Do this until we have checked all possible 5 consecutive digits.
	{
		/* Below we copy a digit, one at a time, into it's respective container. Since atoi() only
			accepts the data type char* we must make sure firstDigit is char* - as it is; we must
			also convert the digit we grab from a string to char* using c_str().
			strcpy (destination (char*) , source (char*)
			We then pass this to atoi() which converts a string to an integer.
			atoi ( value (char*) )
			and save it to it's respective container - which must be of type int.
			
			Do this for 5 consecutive integers; afterwards, check the next five - by incrementing
			the starting position by one and checking again.
			Each 5 consecutive integers are multiplied together to create a product, which is then compared
			against the previous largest. If it is larger than the previous, it then becomes the largest
			for future comparisons.
		*/
		strcpy ( firstDigit, numbers.substr(start,1).c_str() );
		firstDigitInt = atoi (firstDigit);
		strcpy ( secondDigit, numbers.substr(start+1,1).c_str() );
		secondDigitInt = atoi (secondDigit);
		strcpy ( thirdDigit, numbers.substr(start+2,1).c_str() );
		thirdDigitInt = atoi (thirdDigit);
		strcpy ( fourthDigit, numbers.substr(start+3,1).c_str() );
		fourthDigitInt = atoi (fourthDigit);
		strcpy ( fifthDigit, numbers.substr(start+4,1).c_str() );
		fifthDigitInt = atoi (fifthDigit);
		start += 1;
		int highestProdTemp = firstDigitInt * secondDigitInt * thirdDigitInt * fourthDigitInt * fifthDigitInt;
		cout << "Number: " << firstDigit << secondDigit << thirdDigit << fourthDigit << fifthDigit;
		cout << " Temp vs. Highest: " << highestProdTemp << " vs. " << highestProd << endl;
		if (highestProdTemp > highestProd ) highestProd = highestProdTemp;
	}
	
	// Output the final largest product of 5 consecutive integers.
	cout << highestProd << endl;
		
	return 0;
}
